GAS LISTING /tmp/ccA0TEwu.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata.str1.8,"aMS",@progbits,1
   7              		.align	3
   8              	.LC0:
   9 0000 4D41494E 		.string	"MAIN\n"
   9      0A00
  10 0006 0000     		.align	3
  11              	.LC1:
  12 0008 4D61696E 		.string	"Main finished\n"
  12      2066696E 
  12      69736865 
  12      640A00
  13              		.text
  14              		.align	2
  15              		.globl	main
  17              	main:
  18              	.LFB60:
  19              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** //
   2:src/main.cpp  **** // Created by os on 7/31/23.
   3:src/main.cpp  **** //
   4:src/main.cpp  **** 
   5:src/main.cpp  **** #include "../h/printing.hpp"
   6:src/main.cpp  **** #include "../h/pcb.hpp"
   7:src/main.cpp  **** #include "../h/riscv.hpp"
   8:src/main.cpp  **** #include "../h/syscall_cpp.hpp"
   9:src/main.cpp  **** 
  10:src/main.cpp  **** // MODIFIKACIJA ZA ID NITI
  11:src/main.cpp  **** /*
  12:src/main.cpp  **** class WorkerA1: public Thread {
  13:src/main.cpp  **** public:
  14:src/main.cpp  ****     WorkerA1():Thread() {}
  15:src/main.cpp  ****     void run() override {
  16:src/main.cpp  ****         work();
  17:src/main.cpp  ****     }
  18:src/main.cpp  **** 
  19:src/main.cpp  ****     void work(){
  20:src/main.cpp  ****         for(uint64 i = 0; i < 10; i++){
  21:src/main.cpp  ****             while(!PCB::readyToPrintA){}
  22:src/main.cpp  ****         }
  23:src/main.cpp  ****         PCB::readyToPrintA = false;
  24:src/main.cpp  ****         int idA = get_thread_id();
  25:src/main.cpp  ****         printString("A: id = ");
  26:src/main.cpp  ****         printInt(idA);
  27:src/main.cpp  ****         printString("\n");
  28:src/main.cpp  **** 
  29:src/main.cpp  ****         thread_dispatch();
  30:src/main.cpp  ****     }
  31:src/main.cpp  **** };
  32:src/main.cpp  **** 
  33:src/main.cpp  **** class WorkerB2: public Thread {
  34:src/main.cpp  **** public:
  35:src/main.cpp  ****     WorkerB2():Thread() {}
GAS LISTING /tmp/ccA0TEwu.s 			page 2


  36:src/main.cpp  ****     void run() override {
  37:src/main.cpp  ****         work();
  38:src/main.cpp  ****     }
  39:src/main.cpp  **** 
  40:src/main.cpp  ****     void work(){
  41:src/main.cpp  ****         for(uint64 i = 0; i < 10; i++){
  42:src/main.cpp  ****             while(!PCB::readyToPrintB){}
  43:src/main.cpp  ****         }
  44:src/main.cpp  ****         PCB::readyToPrintB = false;
  45:src/main.cpp  ****         int idB= get_thread_id();
  46:src/main.cpp  ****         printString("B: id = ");
  47:src/main.cpp  ****         printInt(idB);
  48:src/main.cpp  ****         printString("\n");
  49:src/main.cpp  **** 
  50:src/main.cpp  ****         thread_dispatch();
  51:src/main.cpp  ****     }
  52:src/main.cpp  **** };
  53:src/main.cpp  **** 
  54:src/main.cpp  **** class WorkerC3: public Thread {
  55:src/main.cpp  **** public:
  56:src/main.cpp  ****     WorkerC3():Thread() {}
  57:src/main.cpp  ****     void run() override {
  58:src/main.cpp  ****         work();
  59:src/main.cpp  ****     }
  60:src/main.cpp  **** 
  61:src/main.cpp  ****     void work(){
  62:src/main.cpp  ****         for(uint64 i = 0; i < 10; i++){
  63:src/main.cpp  ****             while(!PCB::readyToPrintC){}
  64:src/main.cpp  ****         }
  65:src/main.cpp  ****         PCB::readyToPrintC = false;
  66:src/main.cpp  ****         int idC = get_thread_id();
  67:src/main.cpp  ****         printString("C: id = ");
  68:src/main.cpp  ****         printInt(idC);
  69:src/main.cpp  ****         printString("\n");
  70:src/main.cpp  **** 
  71:src/main.cpp  ****         thread_dispatch();
  72:src/main.cpp  ****     }
  73:src/main.cpp  **** };
  74:src/main.cpp  **** */
  75:src/main.cpp  **** /*
  76:src/main.cpp  **** class WorkerA1: public Thread {
  77:src/main.cpp  **** public:
  78:src/main.cpp  ****     WorkerA1():Thread() {}
  79:src/main.cpp  ****     void run() override {
  80:src/main.cpp  ****         work();
  81:src/main.cpp  ****     }
  82:src/main.cpp  **** 
  83:src/main.cpp  ****     void work(){
  84:src/main.cpp  ****         int* test = new int[600]; //38blocks with 64 blocksize
  85:src/main.cpp  ****         test[0] = 1;
  86:src/main.cpp  ****         for(uint64 i = 0; i < 10; i++){
  87:src/main.cpp  ****             for(uint64 j = 0; j < 300000000; j++){
  88:src/main.cpp  **** 
  89:src/main.cpp  ****             }
  90:src/main.cpp  ****             int idA = get_thread_id();
  91:src/main.cpp  ****             printString("A: id = ");
  92:src/main.cpp  ****             printInt(idA);
GAS LISTING /tmp/ccA0TEwu.s 			page 3


  93:src/main.cpp  ****             printString("\n");
  94:src/main.cpp  ****             thread_dispatch();
  95:src/main.cpp  ****         }
  96:src/main.cpp  ****     }
  97:src/main.cpp  **** };
  98:src/main.cpp  **** 
  99:src/main.cpp  **** class WorkerB2: public Thread {
 100:src/main.cpp  **** public:
 101:src/main.cpp  ****     WorkerB2():Thread() {}
 102:src/main.cpp  ****     void run() override {
 103:src/main.cpp  ****         work();
 104:src/main.cpp  ****     }
 105:src/main.cpp  **** 
 106:src/main.cpp  ****     void work(){
 107:src/main.cpp  ****         for(uint64 i = 0; i < 10; i++){
 108:src/main.cpp  ****             for(uint64 j = 0; j < 300000000; j++) {
 109:src/main.cpp  **** 
 110:src/main.cpp  ****             }
 111:src/main.cpp  ****             int idB= get_thread_id();
 112:src/main.cpp  ****             printString("B: id = ");
 113:src/main.cpp  ****             printInt(idB);
 114:src/main.cpp  ****             printString("\n");
 115:src/main.cpp  **** 
 116:src/main.cpp  ****             thread_dispatch();
 117:src/main.cpp  ****         }
 118:src/main.cpp  ****     }
 119:src/main.cpp  **** };
 120:src/main.cpp  **** 
 121:src/main.cpp  **** class WorkerC3: public Thread {
 122:src/main.cpp  **** public:
 123:src/main.cpp  ****     WorkerC3(Thread* thr):Thread() {toPing = thr;}
 124:src/main.cpp  ****     void run() override {
 125:src/main.cpp  ****         work();
 126:src/main.cpp  ****     }
 127:src/main.cpp  **** 
 128:src/main.cpp  ****     void work(){
 129:src/main.cpp  ****         for(uint64 i = 0; i < 10; i++){
 130:src/main.cpp  ****             for(uint64 j = 0; j < 300000000; j++){
 131:src/main.cpp  **** 
 132:src/main.cpp  ****             }
 133:src/main.cpp  ****             int idC = get_thread_id();
 134:src/main.cpp  ****             printString("C: id = ");
 135:src/main.cpp  ****             printInt(idC);
 136:src/main.cpp  ****             printString("\n");
 137:src/main.cpp  ****             if(i == 5){
 138:src/main.cpp  ****                 printString("Ping threadA!\n");
 139:src/main.cpp  ****                 toPing->pingThread();
 140:src/main.cpp  ****             }
 141:src/main.cpp  **** 
 142:src/main.cpp  ****             thread_dispatch();
 143:src/main.cpp  ****         }
 144:src/main.cpp  **** 
 145:src/main.cpp  ****     }
 146:src/main.cpp  **** 
 147:src/main.cpp  **** private:
 148:src/main.cpp  ****     Thread* toPing;
 149:src/main.cpp  **** };
GAS LISTING /tmp/ccA0TEwu.s 			page 4


 150:src/main.cpp  **** */
 151:src/main.cpp  **** 
 152:src/main.cpp  **** /*
 153:src/main.cpp  **** #include "../h/resource.hpp"
 154:src/main.cpp  **** 
 155:src/main.cpp  **** class ResourceWorker: public Thread {
 156:src/main.cpp  **** public:
 157:src/main.cpp  ****     ResourceWorker(int n, Resource* r):Thread() {cnt = n; rsc = r;}
 158:src/main.cpp  ****     void run() override {
 159:src/main.cpp  ****         work();
 160:src/main.cpp  ****     }
 161:src/main.cpp  **** 
 162:src/main.cpp  ****     void work(){
 163:src/main.cpp  ****         int id = get_thread_id();
 164:src/main.cpp  ****         printString("Thread: id = ");
 165:src/main.cpp  ****         printInt(id);
 166:src/main.cpp  ****         printString("\n");
 167:src/main.cpp  **** 
 168:src/main.cpp  ****         rsc->take(cnt);
 169:src/main.cpp  ****         printString("Taken ");
 170:src/main.cpp  ****         printInt(cnt);
 171:src/main.cpp  ****         printString(" resources!\n");
 172:src/main.cpp  **** 
 173:src/main.cpp  ****         thread_dispatch();
 174:src/main.cpp  **** 
 175:src/main.cpp  ****         rsc->give_back(cnt);
 176:src/main.cpp  ****         printString("Given back ");
 177:src/main.cpp  ****         printInt(cnt);
 178:src/main.cpp  ****         printString(" resources!\n");
 179:src/main.cpp  ****     }
 180:src/main.cpp  **** private:
 181:src/main.cpp  ****     int cnt;
 182:src/main.cpp  ****     Resource* rsc;
 183:src/main.cpp  **** };
 184:src/main.cpp  **** */
 185:src/main.cpp  **** 
 186:src/main.cpp  **** /*
 187:src/main.cpp  **** class WorkerX: public Thread {
 188:src/main.cpp  **** public:
 189:src/main.cpp  ****     WorkerX():Thread() {}
 190:src/main.cpp  ****     void run() override {
 191:src/main.cpp  ****         work();
 192:src/main.cpp  ****     }
 193:src/main.cpp  **** 
 194:src/main.cpp  ****     void work(){
 195:src/main.cpp  ****         int idX = get_thread_id();
 196:src/main.cpp  ****         for(uint64 i = 0; i < 5; i++) {
 197:src/main.cpp  ****             printString("Thread id=*");
 198:src/main.cpp  ****             printInt(idX);
 199:src/main.cpp  ****             printString("*: Hello!\n");
 200:src/main.cpp  **** 
 201:src/main.cpp  ****             for(uint64 j = 0; j < (uint64)(idX * 100000000); j++) {
 202:src/main.cpp  **** 
 203:src/main.cpp  ****             }
 204:src/main.cpp  ****         }
 205:src/main.cpp  ****     }
 206:src/main.cpp  **** };
GAS LISTING /tmp/ccA0TEwu.s 			page 5


 207:src/main.cpp  **** */
 208:src/main.cpp  **** extern void userMain();
 209:src/main.cpp  **** 
 210:src/main.cpp  **** int main() {
  20              		.loc 1 210 12
  21              		.cfi_startproc
  22 0000 130101FE 		addi	sp,sp,-32
  23              		.cfi_def_cfa_offset 32
  24 0004 233C1100 		sd	ra,24(sp)
  25 0008 23388100 		sd	s0,16(sp)
  26              		.cfi_offset 1, -8
  27              		.cfi_offset 8, -16
  28 000c 13040102 		addi	s0,sp,32
  29              		.cfi_def_cfa 8, 0
 211:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap | 0b01);
  30              		.loc 1 211 5
  31              		.loc 1 211 19 is_stmt 0
  32 0010 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
  32      83B70700 
  33 0018 93E71700 		ori	a5,a5,1
  34              	.LVL0:
  35              	.LBB6:
  36              	.LBB7:
  37              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 8/14/23.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
GAS LISTING /tmp/ccA0TEwu.s 			page 6


  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     //read a0
  80:src/../h/riscv.hpp ****     static long r_a0();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     //write a0
  83:src/../h/riscv.hpp ****     static void w_a0(long a0);
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     //read a1
  86:src/../h/riscv.hpp ****     static uint64 r_a1();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     //write a1
  89:src/../h/riscv.hpp ****     static void w_a1(uint64 a1);
  90:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccA0TEwu.s 			page 7


  91:src/../h/riscv.hpp ****     //read a2
  92:src/../h/riscv.hpp ****     static uint64 r_a2();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     //write a2
  95:src/../h/riscv.hpp ****     static void w_a2(uint64 a2);
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     //read a3
  98:src/../h/riscv.hpp ****     static uint64 r_a3();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     //write a3
 101:src/../h/riscv.hpp ****     static void w_a3(uint64 a3);
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp ****     //read a4
 104:src/../h/riscv.hpp ****     static uint64 r_a4();
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp ****     //write a4
 107:src/../h/riscv.hpp ****     static void w_a4(uint64 a4);
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp ****     //read a4
 110:src/../h/riscv.hpp ****     static uint64 r_a6();
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp ****     //write a4
 113:src/../h/riscv.hpp ****     static void w_a6(uint64 a6);
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp ****     //read a4
 116:src/../h/riscv.hpp ****     static uint64 r_a7();
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp ****     //write a4
 119:src/../h/riscv.hpp ****     static void w_a7(uint64 a7);
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp ****     static void w_a0_stack(long a0);
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp ****     static void supervisorTrap();
 124:src/../h/riscv.hpp **** private:
 125:src/../h/riscv.hpp ****     static void handleSupervisorInterrupt();
 126:src/../h/riscv.hpp ****     static void handleConsoleInterrupt();
 127:src/../h/riscv.hpp ****     static void handleTimerInterrupt();
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** };
 130:src/../h/riscv.hpp **** 
 131:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 132:src/../h/riscv.hpp **** {
 133:src/../h/riscv.hpp ****     uint64 volatile scause;
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 135:src/../h/riscv.hpp ****     return scause;
 136:src/../h/riscv.hpp **** }
 137:src/../h/riscv.hpp **** 
 138:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 139:src/../h/riscv.hpp **** {
 140:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 141:src/../h/riscv.hpp **** }
 142:src/../h/riscv.hpp **** 
 143:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 144:src/../h/riscv.hpp **** {
 145:src/../h/riscv.hpp ****     uint64 volatile sepc;
 146:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 147:src/../h/riscv.hpp ****     return sepc;
GAS LISTING /tmp/ccA0TEwu.s 			page 8


 148:src/../h/riscv.hpp **** }
 149:src/../h/riscv.hpp **** 
 150:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 151:src/../h/riscv.hpp **** {
 152:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 153:src/../h/riscv.hpp **** }
 154:src/../h/riscv.hpp **** 
 155:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 156:src/../h/riscv.hpp **** {
 157:src/../h/riscv.hpp ****     uint64 volatile stvec;
 158:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 159:src/../h/riscv.hpp ****     return stvec;
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  38              		.loc 2 164 5 is_stmt 1
  39              		.loc 2 164 69 is_stmt 0
  40              	#APP
  41              	# 164 "src/../h/riscv.hpp" 1
 165              	}
  42              		csrw stvec, a5
  43              	# 0 "" 2
  44              	.LVL1:
  45              	#NO_APP
  46              	.LBE7:
  47              	.LBE6:
 212:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  48              		.loc 1 212 5 is_stmt 1
  49              	.LBB8:
  50              	.LBB9:
 166:src/../h/riscv.hpp **** 
 167:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 168:src/../h/riscv.hpp **** {
 169:src/../h/riscv.hpp ****     uint64 volatile stval;
 170:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 171:src/../h/riscv.hpp ****     return stval;
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 182:src/../h/riscv.hpp **** }
 183:src/../h/riscv.hpp **** 
 184:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 185:src/../h/riscv.hpp **** {
 186:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 187:src/../h/riscv.hpp **** }
 188:src/../h/riscv.hpp **** 
 189:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 190:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccA0TEwu.s 			page 9


 191:src/../h/riscv.hpp ****     uint64 volatile sip;
 192:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 193:src/../h/riscv.hpp ****     return sip;
 194:src/../h/riscv.hpp **** }
 195:src/../h/riscv.hpp **** 
 196:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 197:src/../h/riscv.hpp **** {
 198:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 199:src/../h/riscv.hpp **** }
 200:src/../h/riscv.hpp **** 
 201:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 202:src/../h/riscv.hpp **** {
 203:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
  51              		.loc 2 203 5
  52              		.loc 2 203 68 is_stmt 0
  53 0020 93072000 		li	a5,2
  54              	#APP
  55              	# 203 "src/../h/riscv.hpp" 1
 204              	}
  56              		csrs sstatus, a5
  57              	# 0 "" 2
  58              	.LVL2:
  59              	#NO_APP
  60              	.LBE9:
  61              	.LBE8:
 213:src/main.cpp  **** 
 214:src/main.cpp  ****     /*printString("MAIN\n");
 215:src/main.cpp  ****     auto* mainThread = new Thread(nullptr, nullptr);
 216:src/main.cpp  ****     Thread::setRunning(mainThread);
 217:src/main.cpp  ****      */
 218:src/main.cpp  **** 
 219:src/main.cpp  ****     PCB::running = PCB::createThread(nullptr, nullptr, nullptr);
  62              		.loc 1 219 5 is_stmt 1
  63              		.loc 1 219 37 is_stmt 0
  64 0028 13060000 		li	a2,0
  65 002c 93050000 		li	a1,0
  66 0030 13050000 		li	a0,0
  67 0034 97000000 		call	_ZN3PCB12createThreadEPFvPvES0_Pm@plt
  67      E7800000 
  68              	.LVL3:
  69              		.loc 1 219 18
  70 003c 97070000 		la	a5,_ZN3PCB7runningE
  70      83B70700 
  71 0044 23B0A700 		sd	a0,0(a5)
 220:src/main.cpp  ****     printString("MAIN\n");
  72              		.loc 1 220 5 is_stmt 1
  73              		.loc 1 220 16 is_stmt 0
  74 0048 17050000 		lla	a0,.LC0
  74      13050500 
  75 0050 97000000 		call	_Z11printStringPKc@plt
  75      E7800000 
  76              	.LVL4:
 221:src/main.cpp  **** 
 222:src/main.cpp  ****     thread_t user;
  77              		.loc 1 222 5 is_stmt 1
 223:src/main.cpp  ****     thread_create(&user, reinterpret_cast<void (*)(void *)>(userMain), nullptr);
  78              		.loc 1 223 5
GAS LISTING /tmp/ccA0TEwu.s 			page 10


  79              		.loc 1 223 18 is_stmt 0
  80 0058 13060000 		li	a2,0
  81 005c 97050000 		la	a1,_Z8userMainv
  81      83B50500 
  82 0064 130584FE 		addi	a0,s0,-24
  83 0068 97000000 		call	_Z13thread_createPP3PCBPFvPvES2_@plt
  83      E7800000 
  84              	.LVL5:
 224:src/main.cpp  **** 
 225:src/main.cpp  ****     thread_join(user);
  85              		.loc 1 225 5 is_stmt 1
  86              		.loc 1 225 16 is_stmt 0
  87 0070 033584FE 		ld	a0,-24(s0)
  88 0074 97000000 		call	_Z11thread_joinP3PCB@plt
  88      E7800000 
  89              	.LVL6:
 226:src/main.cpp  **** 
 227:src/main.cpp  ****     printString("Main finished\n");
  90              		.loc 1 227 5 is_stmt 1
  91              		.loc 1 227 16 is_stmt 0
  92 007c 17050000 		lla	a0,.LC1
  92      13050500 
  93 0084 97000000 		call	_Z11printStringPKc@plt
  93      E7800000 
  94              	.LVL7:
 228:src/main.cpp  ****     return 0;
  95              		.loc 1 228 5 is_stmt 1
 229:src/main.cpp  **** /*
 230:src/main.cpp  ****     Thread* threadA = new WorkerA1();
 231:src/main.cpp  ****     printString("Thread A created!\n");
 232:src/main.cpp  ****     Thread* threadB = new WorkerB2();
 233:src/main.cpp  ****     printString("Thread B created!\n");
 234:src/main.cpp  ****     Thread* threadC = new WorkerC3();
 235:src/main.cpp  ****     printString("Thread C created!\n");
 236:src/main.cpp  **** 
 237:src/main.cpp  ****     threadA->start();
 238:src/main.cpp  ****     threadB->start();
 239:src/main.cpp  ****     threadC->start();
 240:src/main.cpp  **** 
 241:src/main.cpp  ****     threadA->join();
 242:src/main.cpp  ****     threadB->join();
 243:src/main.cpp  ****     threadC->join();
 244:src/main.cpp  **** */
 245:src/main.cpp  **** 
 246:src/main.cpp  ****     /*
 247:src/main.cpp  ****     static Resource* resource = new Resource(12);
 248:src/main.cpp  ****     Thread* threads[10];
 249:src/main.cpp  ****     for(int i = 0; i < 10; i++){
 250:src/main.cpp  ****         threads[i] = new ResourceWorker(i+1, resource);
 251:src/main.cpp  ****     }
 252:src/main.cpp  **** 
 253:src/main.cpp  ****     for(int i = 0; i < 10; i++){
 254:src/main.cpp  ****         threads[i]->start();
 255:src/main.cpp  ****     }
 256:src/main.cpp  **** 
 257:src/main.cpp  ****     for(int i = 0; i < 10; i++){
 258:src/main.cpp  ****         threads[i]->join();
GAS LISTING /tmp/ccA0TEwu.s 			page 11


 259:src/main.cpp  ****     }
 260:src/main.cpp  ****      */
 261:src/main.cpp  **** /*
 262:src/main.cpp  ****     Thread* threadA = new WorkerA1();
 263:src/main.cpp  ****     printString("Thread A created!\n");
 264:src/main.cpp  ****     Thread* threadB = new WorkerB2();
 265:src/main.cpp  ****     printString("Thread B created!\n");
 266:src/main.cpp  ****     Thread* threadC = new WorkerC3(threadA);
 267:src/main.cpp  ****     printString("Thread C created!\n");
 268:src/main.cpp  **** 
 269:src/main.cpp  ****     threadA->start();
 270:src/main.cpp  ****     threadB->start();
 271:src/main.cpp  ****     threadC->start();
 272:src/main.cpp  **** 
 273:src/main.cpp  ****     threadA->join();
 274:src/main.cpp  ****     threadB->join();
 275:src/main.cpp  ****     threadC->join();
 276:src/main.cpp  **** */
 277:src/main.cpp  ****     /*Thread::SetMaximumThreads(3);
 278:src/main.cpp  ****     Thread* threads[20];
 279:src/main.cpp  **** 
 280:src/main.cpp  ****     for(int i = 0; i < 20; i++){
 281:src/main.cpp  ****         threads[i] = new WorkerX();
 282:src/main.cpp  ****         printString("Created thread ");
 283:src/main.cpp  ****         printInt(i);
 284:src/main.cpp  ****         printString("!\n");
 285:src/main.cpp  ****     }
 286:src/main.cpp  **** 
 287:src/main.cpp  ****     for(int i = 0; i < 20; i++){
 288:src/main.cpp  ****         threads[i]->start();
 289:src/main.cpp  ****     }
 290:src/main.cpp  **** 
 291:src/main.cpp  ****     for(int i = 0; i < 20; i++){
 292:src/main.cpp  ****         threads[i]->join();
 293:src/main.cpp  ****     }
 294:src/main.cpp  **** 
 295:src/main.cpp  ****     printString("Main finished\n");
 296:src/main.cpp  ****     return 0;
 297:src/main.cpp  ****      */
 298:src/main.cpp  **** }...
  96              		.loc 1 298 1 is_stmt 0
  97 008c 13050000 		li	a0,0
  98 0090 83308101 		ld	ra,24(sp)
  99              		.cfi_restore 1
 100 0094 03340101 		ld	s0,16(sp)
 101              		.cfi_restore 8
 102              		.cfi_def_cfa 2, 32
 103 0098 13010102 		addi	sp,sp,32
 104              		.cfi_def_cfa_offset 0
 105 009c 67800000 		jr	ra
 106              		.cfi_endproc
 107              	.LFE60:
 109              	.Letext0:
 110              		.file 3 "src/../h/../h/../lib/hw.h"
 111              		.file 4 "src/../h/../h/syscall_c.hpp"
 112              		.file 5 "src/../h/pcb.hpp"
 113              		.file 6 "src/../h/printing.hpp"
GAS LISTING /tmp/ccA0TEwu.s 			page 12


GAS LISTING /tmp/ccA0TEwu.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccA0TEwu.s:17     .text:0000000000000000 main
     /tmp/ccA0TEwu.s:21     .text:0000000000000000 .L0 
     /tmp/ccA0TEwu.s:22     .text:0000000000000000 .L0 
     /tmp/ccA0TEwu.s:23     .text:0000000000000004 .L0 
     /tmp/ccA0TEwu.s:26     .text:000000000000000c .L0 
     /tmp/ccA0TEwu.s:27     .text:000000000000000c .L0 
     /tmp/ccA0TEwu.s:29     .text:0000000000000010 .L0 
     /tmp/ccA0TEwu.s:31     .text:0000000000000010 .L0 
     /tmp/ccA0TEwu.s:32     .text:0000000000000010 .L0 
     /tmp/ccA0TEwu.s:39     .text:000000000000001c .L0 
  src/../h/riscv.hpp:164    .text:000000000000001c .L0 
     /tmp/ccA0TEwu.s:51     .text:0000000000000020 .L0 
     /tmp/ccA0TEwu.s:52     .text:0000000000000020 .L0 
     /tmp/ccA0TEwu.s:53     .text:0000000000000020 .L0 
     /tmp/ccA0TEwu.s:63     .text:0000000000000028 .L0 
     /tmp/ccA0TEwu.s:64     .text:0000000000000028 .L0 
     /tmp/ccA0TEwu.s:70     .text:000000000000003c .L0 
     /tmp/ccA0TEwu.s:73     .text:0000000000000048 .L0 
     /tmp/ccA0TEwu.s:74     .text:0000000000000048 .L0 
     /tmp/ccA0TEwu.s:78     .text:0000000000000058 .L0 
     /tmp/ccA0TEwu.s:79     .text:0000000000000058 .L0 
     /tmp/ccA0TEwu.s:80     .text:0000000000000058 .L0 
     /tmp/ccA0TEwu.s:86     .text:0000000000000070 .L0 
     /tmp/ccA0TEwu.s:87     .text:0000000000000070 .L0 
     /tmp/ccA0TEwu.s:91     .text:000000000000007c .L0 
     /tmp/ccA0TEwu.s:92     .text:000000000000007c .L0 
     /tmp/ccA0TEwu.s:96     .text:000000000000008c .L0 
     /tmp/ccA0TEwu.s:97     .text:000000000000008c .L0 
     /tmp/ccA0TEwu.s:99     .text:0000000000000094 .L0 
     /tmp/ccA0TEwu.s:101    .text:0000000000000098 .L0 
     /tmp/ccA0TEwu.s:102    .text:0000000000000098 .L0 
     /tmp/ccA0TEwu.s:104    .text:000000000000009c .L0 
     /tmp/ccA0TEwu.s:106    .text:00000000000000a0 .L0 
     /tmp/ccA0TEwu.s:114    .text:00000000000000a0 .L0 
     /tmp/ccA0TEwu.s:32     .text:0000000000000010 .L0 
     /tmp/ccA0TEwu.s:70     .text:000000000000003c .L0 
     /tmp/ccA0TEwu.s:8      .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccA0TEwu.s:74     .text:0000000000000048 .L0 
     /tmp/ccA0TEwu.s:81     .text:000000000000005c .L0 
     /tmp/ccA0TEwu.s:11     .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccA0TEwu.s:92     .text:000000000000007c .L0 
     /tmp/ccA0TEwu.s:1288   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccA0TEwu.s:2370   .debug_str:000000000000083e .LASF171
     /tmp/ccA0TEwu.s:2166   .debug_str:0000000000000296 .LASF172
     /tmp/ccA0TEwu.s:2376   .debug_str:0000000000000926 .LASF173
     /tmp/ccA0TEwu.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccA0TEwu.s:109    .text:00000000000000a0 .Letext0
     /tmp/ccA0TEwu.s:2082   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccA0TEwu.s:2192   .debug_str:000000000000037d .LASF0
     /tmp/ccA0TEwu.s:2230   .debug_str:000000000000044e .LASF1
     /tmp/ccA0TEwu.s:2300   .debug_str:000000000000064c .LASF2
     /tmp/ccA0TEwu.s:2312   .debug_str:00000000000006c4 .LASF4
     /tmp/ccA0TEwu.s:2202   .debug_str:00000000000003b6 .LASF3
     /tmp/ccA0TEwu.s:2092   .debug_str:0000000000000037 .LASF5
     /tmp/ccA0TEwu.s:2276   .debug_str:000000000000059b .LASF6
GAS LISTING /tmp/ccA0TEwu.s 			page 14


     /tmp/ccA0TEwu.s:2220   .debug_str:000000000000040e .LASF7
     /tmp/ccA0TEwu.s:2174   .debug_str:00000000000002d0 .LASF8
     /tmp/ccA0TEwu.s:2180   .debug_str:000000000000030d .LASF9
     /tmp/ccA0TEwu.s:2124   .debug_str:0000000000000138 .LASF10
     /tmp/ccA0TEwu.s:2164   .debug_str:0000000000000287 .LASF11
     /tmp/ccA0TEwu.s:2132   .debug_str:0000000000000181 .LASF12
     /tmp/ccA0TEwu.s:2122   .debug_str:0000000000000128 .LASF13
     /tmp/ccA0TEwu.s:2348   .debug_str:00000000000007c0 .LASF14
     /tmp/ccA0TEwu.s:2154   .debug_str:000000000000021a .LASF15
     /tmp/ccA0TEwu.s:2334   .debug_str:000000000000074e .LASF16
     /tmp/ccA0TEwu.s:2398   .debug_str:00000000000009fb .LASF17
     /tmp/ccA0TEwu.s:2362   .debug_str:0000000000000808 .LASF78
     /tmp/ccA0TEwu.s:2358   .debug_str:00000000000007fd .LASF18
     /tmp/ccA0TEwu.s:2326   .debug_str:0000000000000723 .LASF19
     /tmp/ccA0TEwu.s:2236   .debug_str:000000000000046f .LASF20
     /tmp/ccA0TEwu.s:2114   .debug_str:00000000000000fa .LASF21
     /tmp/ccA0TEwu.s:2354   .debug_str:00000000000007ea .LASF174
     /tmp/ccA0TEwu.s:2228   .debug_str:0000000000000449 .LASF22
     /tmp/ccA0TEwu.s:2430   .debug_str:0000000000000aae .LASF24
     /tmp/ccA0TEwu.s:2356   .debug_str:00000000000007f2 .LASF32
     /tmp/ccA0TEwu.s:2412   .debug_str:0000000000000a4a .LASF34
     /tmp/ccA0TEwu.s:2110   .debug_str:00000000000000dd .LASF23
     /tmp/ccA0TEwu.s:2182   .debug_str:000000000000031b .LASF25
     /tmp/ccA0TEwu.s:2280   .debug_str:00000000000005c3 .LASF58
     /tmp/ccA0TEwu.s:2126   .debug_str:0000000000000147 .LASF60
     /tmp/ccA0TEwu.s:2396   .debug_str:00000000000009f1 .LASF26
     /tmp/ccA0TEwu.s:2338   .debug_str:0000000000000774 .LASF27
     /tmp/ccA0TEwu.s:2432   .debug_str:0000000000000aba .LASF28
     /tmp/ccA0TEwu.s:2274   .debug_str:0000000000000585 .LASF29
     /tmp/ccA0TEwu.s:2368   .debug_str:0000000000000830 .LASF30
     /tmp/ccA0TEwu.s:2290   .debug_str:0000000000000615 .LASF31
     /tmp/ccA0TEwu.s:2440   .debug_str:0000000000000ae8 .LASF33
     /tmp/ccA0TEwu.s:2186   .debug_str:000000000000033d .LASF35
     /tmp/ccA0TEwu.s:2336   .debug_str:0000000000000764 .LASF36
     /tmp/ccA0TEwu.s:2386   .debug_str:00000000000009aa .LASF37
     /tmp/ccA0TEwu.s:2136   .debug_str:0000000000000196 .LASF38
     /tmp/ccA0TEwu.s:2160   .debug_str:000000000000025d .LASF39
     /tmp/ccA0TEwu.s:2434   .debug_str:0000000000000ac5 .LASF40
     /tmp/ccA0TEwu.s:2156   .debug_str:0000000000000230 .LASF41
     /tmp/ccA0TEwu.s:2118   .debug_str:0000000000000111 .LASF42
     /tmp/ccA0TEwu.s:2150   .debug_str:0000000000000205 .LASF43
     /tmp/ccA0TEwu.s:2088   .debug_str:0000000000000016 .LASF44
     /tmp/ccA0TEwu.s:2200   .debug_str:00000000000003a9 .LASF46
     /tmp/ccA0TEwu.s:2332   .debug_str:000000000000073b .LASF45
     /tmp/ccA0TEwu.s:2272   .debug_str:0000000000000578 .LASF47
     /tmp/ccA0TEwu.s:2346   .debug_str:00000000000007b3 .LASF48
     /tmp/ccA0TEwu.s:2402   .debug_str:0000000000000a0e .LASF49
     /tmp/ccA0TEwu.s:2264   .debug_str:0000000000000544 .LASF175
     /tmp/ccA0TEwu.s:2242   .debug_str:000000000000048e .LASF50
     /tmp/ccA0TEwu.s:2168   .debug_str:00000000000002a3 .LASF51
     /tmp/ccA0TEwu.s:2328   .debug_str:000000000000072b .LASF52
     /tmp/ccA0TEwu.s:2382   .debug_str:0000000000000975 .LASF53
     /tmp/ccA0TEwu.s:2198   .debug_str:00000000000003a4 .LASF54
     /tmp/ccA0TEwu.s:2112   .debug_str:00000000000000e9 .LASF55
     /tmp/ccA0TEwu.s:2428   .debug_str:0000000000000aa8 .LASF56
     /tmp/ccA0TEwu.s:2372   .debug_str:0000000000000902 .LASF57
     /tmp/ccA0TEwu.s:2330   .debug_str:0000000000000736 .LASF59
GAS LISTING /tmp/ccA0TEwu.s 			page 15


     /tmp/ccA0TEwu.s:2308   .debug_str:00000000000006aa .LASF61
     /tmp/ccA0TEwu.s:2146   .debug_str:00000000000001f6 .LASF83
     /tmp/ccA0TEwu.s:2098   .debug_str:000000000000005f .LASF85
     /tmp/ccA0TEwu.s:2366   .debug_str:0000000000000828 .LASF62
     /tmp/ccA0TEwu.s:2104   .debug_str:00000000000000b3 .LASF63
     /tmp/ccA0TEwu.s:2106   .debug_str:00000000000000c1 .LASF64
     /tmp/ccA0TEwu.s:2108   .debug_str:00000000000000cf .LASF65
     /tmp/ccA0TEwu.s:2322   .debug_str:0000000000000701 .LASF66
     /tmp/ccA0TEwu.s:2320   .debug_str:00000000000006eb .LASF176
     /tmp/ccA0TEwu.s:2086   .debug_str:0000000000000011 .LASF67
     /tmp/ccA0TEwu.s:2238   .debug_str:0000000000000477 .LASF68
     /tmp/ccA0TEwu.s:2226   .debug_str:0000000000000441 .LASF69
     /tmp/ccA0TEwu.s:2148   .debug_str:00000000000001ff .LASF70
     /tmp/ccA0TEwu.s:2352   .debug_str:00000000000007e1 .LASF71
     /tmp/ccA0TEwu.s:2268   .debug_str:000000000000055a .LASF72
     /tmp/ccA0TEwu.s:2120   .debug_str:0000000000000121 .LASF73
     /tmp/ccA0TEwu.s:2250   .debug_str:00000000000004d9 .LASF74
     /tmp/ccA0TEwu.s:2130   .debug_str:0000000000000171 .LASF75
     /tmp/ccA0TEwu.s:2116   .debug_str:0000000000000103 .LASF151
     /tmp/ccA0TEwu.s:2100   .debug_str:0000000000000072 .LASF153
     /tmp/ccA0TEwu.s:2426   .debug_str:0000000000000a9a .LASF177
     /tmp/ccA0TEwu.s:2102   .debug_str:000000000000008b .LASF178
     /tmp/ccA0TEwu.s:2310   .debug_str:00000000000006b9 .LASF179
     /tmp/ccA0TEwu.s:2294   .debug_str:0000000000000633 .LASF76
     /tmp/ccA0TEwu.s:2404   .debug_str:0000000000000a30 .LASF77
     /tmp/ccA0TEwu.s:2392   .debug_str:00000000000009dd .LASF79
     /tmp/ccA0TEwu.s:2162   .debug_str:000000000000027b .LASF80
     /tmp/ccA0TEwu.s:2224   .debug_str:0000000000000434 .LASF81
     /tmp/ccA0TEwu.s:2142   .debug_str:00000000000001d8 .LASF82
     /tmp/ccA0TEwu.s:2184   .debug_str:0000000000000332 .LASF84
     /tmp/ccA0TEwu.s:2190   .debug_str:0000000000000365 .LASF86
     /tmp/ccA0TEwu.s:2390   .debug_str:00000000000009d4 .LASF87
     /tmp/ccA0TEwu.s:2384   .debug_str:0000000000000995 .LASF88
     /tmp/ccA0TEwu.s:2296   .debug_str:0000000000000638 .LASF89
     /tmp/ccA0TEwu.s:2262   .debug_str:000000000000052f .LASF90
     /tmp/ccA0TEwu.s:2282   .debug_str:00000000000005cf .LASF91
     /tmp/ccA0TEwu.s:2286   .debug_str:00000000000005ee .LASF92
     /tmp/ccA0TEwu.s:2252   .debug_str:00000000000004e1 .LASF93
     /tmp/ccA0TEwu.s:2222   .debug_str:0000000000000421 .LASF94
     /tmp/ccA0TEwu.s:2420   .debug_str:0000000000000a70 .LASF95
     /tmp/ccA0TEwu.s:2374   .debug_str:0000000000000912 .LASF96
     /tmp/ccA0TEwu.s:2248   .debug_str:00000000000004d1 .LASF97
     /tmp/ccA0TEwu.s:2260   .debug_str:000000000000051b .LASF98
     /tmp/ccA0TEwu.s:2232   .debug_str:0000000000000461 .LASF99
     /tmp/ccA0TEwu.s:2288   .debug_str:0000000000000601 .LASF100
     /tmp/ccA0TEwu.s:2438   .debug_str:0000000000000ae0 .LASF101
     /tmp/ccA0TEwu.s:2196   .debug_str:0000000000000390 .LASF102
     /tmp/ccA0TEwu.s:2342   .debug_str:000000000000079b .LASF103
     /tmp/ccA0TEwu.s:2316   .debug_str:00000000000006d1 .LASF104
     /tmp/ccA0TEwu.s:2318   .debug_str:00000000000006e4 .LASF105
     /tmp/ccA0TEwu.s:2128   .debug_str:000000000000015e .LASF106
     /tmp/ccA0TEwu.s:2314   .debug_str:00000000000006cb .LASF107
     /tmp/ccA0TEwu.s:2188   .debug_str:0000000000000353 .LASF108
     /tmp/ccA0TEwu.s:2194   .debug_str:000000000000038a .LASF109
     /tmp/ccA0TEwu.s:2144   .debug_str:00000000000001e4 .LASF110
     /tmp/ccA0TEwu.s:2094   .debug_str:000000000000003e .LASF111
     /tmp/ccA0TEwu.s:2306   .debug_str:0000000000000692 .LASF112
GAS LISTING /tmp/ccA0TEwu.s 			page 16


     /tmp/ccA0TEwu.s:2298   .debug_str:0000000000000641 .LASF113
     /tmp/ccA0TEwu.s:2284   .debug_str:00000000000005d6 .LASF114
     /tmp/ccA0TEwu.s:2406   .debug_str:0000000000000a36 .LASF115
     /tmp/ccA0TEwu.s:2422   .debug_str:0000000000000a78 .LASF116
     /tmp/ccA0TEwu.s:2400   .debug_str:0000000000000a04 .LASF117
     /tmp/ccA0TEwu.s:2096   .debug_str:0000000000000049 .LASF118
     /tmp/ccA0TEwu.s:2408   .debug_str:0000000000000a40 .LASF119
     /tmp/ccA0TEwu.s:2266   .debug_str:0000000000000549 .LASF120
     /tmp/ccA0TEwu.s:2206   .debug_str:00000000000003d9 .LASF121
     /tmp/ccA0TEwu.s:2344   .debug_str:00000000000007a2 .LASF122
     /tmp/ccA0TEwu.s:2410   .debug_str:0000000000000a45 .LASF123
     /tmp/ccA0TEwu.s:2204   .debug_str:00000000000003c8 .LASF124
     /tmp/ccA0TEwu.s:2208   .debug_str:00000000000003de .LASF125
     /tmp/ccA0TEwu.s:2270   .debug_str:0000000000000567 .LASF126
     /tmp/ccA0TEwu.s:2258   .debug_str:0000000000000516 .LASF127
     /tmp/ccA0TEwu.s:2090   .debug_str:0000000000000026 .LASF128
     /tmp/ccA0TEwu.s:2210   .debug_str:00000000000003e3 .LASF129
     /tmp/ccA0TEwu.s:2218   .debug_str:00000000000003fd .LASF130
     /tmp/ccA0TEwu.s:2414   .debug_str:0000000000000a61 .LASF131
     /tmp/ccA0TEwu.s:2442   .debug_str:0000000000000af3 .LASF132
     /tmp/ccA0TEwu.s:2212   .debug_str:00000000000003e8 .LASF133
     /tmp/ccA0TEwu.s:2324   .debug_str:0000000000000712 .LASF134
     /tmp/ccA0TEwu.s:2416   .debug_str:0000000000000a66 .LASF135
     /tmp/ccA0TEwu.s:2378   .debug_str:000000000000095f .LASF136
     /tmp/ccA0TEwu.s:2214   .debug_str:00000000000003ed .LASF137
     /tmp/ccA0TEwu.s:2084   .debug_str:0000000000000000 .LASF138
     /tmp/ccA0TEwu.s:2418   .debug_str:0000000000000a6b .LASF139
     /tmp/ccA0TEwu.s:2240   .debug_str:000000000000047d .LASF140
     /tmp/ccA0TEwu.s:2172   .debug_str:00000000000002cb .LASF141
     /tmp/ccA0TEwu.s:2304   .debug_str:0000000000000681 .LASF142
     /tmp/ccA0TEwu.s:2134   .debug_str:0000000000000191 .LASF143
     /tmp/ccA0TEwu.s:2176   .debug_str:00000000000002e0 .LASF144
     /tmp/ccA0TEwu.s:2380   .debug_str:0000000000000970 .LASF145
     /tmp/ccA0TEwu.s:2244   .debug_str:000000000000049c .LASF146
     /tmp/ccA0TEwu.s:2216   .debug_str:00000000000003f2 .LASF147
     /tmp/ccA0TEwu.s:2140   .debug_str:00000000000001c0 .LASF148
     /tmp/ccA0TEwu.s:2388   .debug_str:00000000000009c5 .LASF149
     /tmp/ccA0TEwu.s:2178   .debug_str:00000000000002f1 .LASF150
     /tmp/ccA0TEwu.s:2364   .debug_str:000000000000080e .LASF152
     /tmp/ccA0TEwu.s:2302   .debug_str:000000000000065a .LASF154
     /tmp/ccA0TEwu.s:2138   .debug_str:00000000000001a9 .LASF155
     /tmp/ccA0TEwu.s:2246   .debug_str:00000000000004ad .LASF156
     /tmp/ccA0TEwu.s:2350   .debug_str:00000000000007cc .LASF157
     /tmp/ccA0TEwu.s:2254   .debug_str:00000000000004e8 .LASF158
     /tmp/ccA0TEwu.s:2152   .debug_str:0000000000000211 .LASF159
     /tmp/ccA0TEwu.s:2360   .debug_str:0000000000000803 .LASF160
     /tmp/ccA0TEwu.s:2170   .debug_str:00000000000002c6 .LASF161
     /tmp/ccA0TEwu.s:18     .text:0000000000000000 .LFB60
     /tmp/ccA0TEwu.s:107    .text:00000000000000a0 .LFE60
     /tmp/ccA0TEwu.s:2292   .debug_str:000000000000062e .LASF162
     /tmp/ccA0TEwu.s:35     .text:000000000000001c .LBB6
     /tmp/ccA0TEwu.s:47     .text:0000000000000020 .LBE6
     /tmp/ccA0TEwu.s:2054   .debug_loc:0000000000000000 .LLST0
     /tmp/ccA0TEwu.s:49     .text:0000000000000020 .LBB8
     /tmp/ccA0TEwu.s:61     .text:0000000000000028 .LBE8
     /tmp/ccA0TEwu.s:2061   .debug_loc:0000000000000023 .LLST1
     /tmp/ccA0TEwu.s:68     .text:000000000000003c .LVL3
GAS LISTING /tmp/ccA0TEwu.s 			page 17


     /tmp/ccA0TEwu.s:76     .text:0000000000000058 .LVL4
     /tmp/ccA0TEwu.s:84     .text:0000000000000070 .LVL5
     /tmp/ccA0TEwu.s:89     .text:000000000000007c .LVL6
     /tmp/ccA0TEwu.s:94     .text:000000000000008c .LVL7
     /tmp/ccA0TEwu.s:2394   .debug_str:00000000000009ec .LASF163
     /tmp/ccA0TEwu.s:2234   .debug_str:0000000000000469 .LASF164
     /tmp/ccA0TEwu.s:2340   .debug_str:0000000000000788 .LASF165
     /tmp/ccA0TEwu.s:2424   .debug_str:0000000000000a8e .LASF167
     /tmp/ccA0TEwu.s:2158   .debug_str:000000000000023c .LASF166
     /tmp/ccA0TEwu.s:2436   .debug_str:0000000000000ad2 .LASF168
     /tmp/ccA0TEwu.s:2278   .debug_str:00000000000005ae .LASF169
     /tmp/ccA0TEwu.s:2256   .debug_str:000000000000050a .LASF170
     /tmp/ccA0TEwu.s:34     .text:000000000000001c .LVL0
     /tmp/ccA0TEwu.s:44     .text:0000000000000020 .LVL1
     /tmp/ccA0TEwu.s:58     .text:0000000000000028 .LVL2
     /tmp/ccA0TEwu.s:115    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN5Riscv14supervisorTrapEv
_ZN3PCB12createThreadEPFvPvES0_Pm
_ZN3PCB7runningE
_Z11printStringPKc
_Z8userMainv
_Z13thread_createPP3PCBPFvPvES2_
_Z11thread_joinP3PCB
